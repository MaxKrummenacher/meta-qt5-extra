From 2dfcb12439328353cac5846e81872b8484c2403e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andreas=20M=C3=BCller?= <schnitzeltony@googlemail.com>
Date: Tue, 3 Oct 2017 21:39:19 +0200
Subject: [PATCH 1/2] Add ARM NEON acceleration
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* More or less a 1/1 copy of SSE implementation. Where possible make use of
  multiply/accumulate (vmla)
* Runtime NEON detection is not easy to implement. The only implementations I
  found did not work properly e.g [1]. So let's trust the compiler.
* On RaspberryPi3 test arrangement with 8 Midi-Tracks / 4 LV2-Plugins the idle
  load is reduced from 30% -> 29%.

[1] http://git.openembedded.org/meta-openembedded/commit/meta-oe?id=cae9cafb9c536fd5ea40d1457c0ee1fcd6a6aa43

Upstream-Status: Submitted [2]

[2] https://github.com/rncbc/qtractor/pull/81

Signed-off-by: Andreas MÃ¼ller <schnitzeltony@googlemail.com>
---
 src/qtractorAudioEngine.cpp  |  40 ++++++++++++++++
 src/qtractorAudioMonitor.cpp |  95 ++++++++++++++++++++++++++++++++++--
 src/qtractorInsertPlugin.cpp | 111 +++++++++++++++++++++++++++++++++++++++----
 3 files changed, 234 insertions(+), 12 deletions(-)

diff --git a/src/qtractorAudioEngine.cpp b/src/qtractorAudioEngine.cpp
index 55dd2c7..e79e272 100644
--- a/src/qtractorAudioEngine.cpp
+++ b/src/qtractorAudioEngine.cpp
@@ -118,6 +118,38 @@ static inline void sse_buffer_add (
 
 #endif
 
+#if defined(__ARM_NEON__)
+#include "arm_neon.h"
+
+// NEON enabled mix-down processor version.
+static inline void neon_buffer_add (
+	float **ppBuffer, float **ppFrames, unsigned int iFrames,
+	unsigned short iBuffers, unsigned short iChannels, unsigned int iOffset )
+{
+	unsigned short j = 0;
+
+	for (unsigned short i = 0; i < iChannels; ++i) {
+		float *pBuffer = ppBuffer[j] + iOffset;
+		float *pFrames = ppFrames[i] + iOffset;
+		unsigned int nframes = iFrames;
+		for (; (long(pBuffer) & 15) && (nframes > 0); --nframes)
+			*pBuffer++ += *pFrames++;
+		for (; nframes >= 4; nframes -= 4) {
+			vst1q_f32(pBuffer,
+				vaddq_f32(
+					vld1q_f32(pBuffer),
+					vld1q_f32(pFrames)));
+			pFrames += 4;
+			pBuffer += 4;
+		}
+		for (; nframes > 0; --nframes)
+			*pBuffer++ += *pFrames++;
+		if (++j >= iBuffers)
+			j = 0;
+	}
+}
+
+#endif
 
 // Standard mix-down processor version.
 static inline void std_buffer_add (
@@ -162,6 +194,10 @@ public:
 			m_pfnBufferAdd = sse_buffer_add;
 		else
 	#endif
+#if defined(__ARM_NEON__)
+		m_pfnBufferAdd = neon_buffer_add;
+		if(false)
+#endif
 		m_pfnBufferAdd = std_buffer_add;
 	}
 
@@ -2133,6 +2169,10 @@ qtractorAudioBus::qtractorAudioBus (
 		m_pfnBufferAdd = sse_buffer_add;
 	else
 #endif
+#if defined(__ARM_NEON__)
+	m_pfnBufferAdd = neon_buffer_add;
+	if(false)
+#endif
 	m_pfnBufferAdd = std_buffer_add;
 }
 
diff --git a/src/qtractorAudioMonitor.cpp b/src/qtractorAudioMonitor.cpp
index e9a0fd1..19f212b 100644
--- a/src/qtractorAudioMonitor.cpp
+++ b/src/qtractorAudioMonitor.cpp
@@ -53,7 +53,6 @@ static inline bool sse_enabled (void)
 #endif
 }
 
-
 // SSE enabled processor versions.
 static inline void sse_process (
 	float *pFrames, unsigned int iFrames, float fGain, float *pfValue )
@@ -122,6 +121,89 @@ static inline void sse_process_meter (
 #endif
 
 
+#if defined(__ARM_NEON__)
+#include "arm_neon.h"
+
+// NEON enabled processor versions.
+static inline void neon_process (
+	float *pFrames, unsigned int iFrames, float fGain, float *pfValue )
+{
+	float32x4_t v0 = vld1q_dup_f32(&fGain);
+	float32x4_t v1 = vld1q_dup_f32(pfValue);
+	float32x4_t v2;
+
+	for (; (long(pFrames) & 15) && (iFrames > 0); --iFrames)
+		*pFrames++ *= fGain;
+
+	for (; iFrames >= 4; iFrames -= 4) {
+		v2 = vmulq_f32(vld1q_f32(pFrames), v0);
+		v1 = vmaxq_f32(v2, v1);
+		vst1q_f32(pFrames, v2);
+		pFrames += 4;
+	}
+
+	for (; iFrames > 0; --iFrames)
+		*pFrames++ *= fGain;
+
+	vst1q_lane_f32(pfValue, v1, 0); // CHEAT: take 1st of 4 possible values.
+}
+
+static inline void neon_process_ramp ( float *pFrames, unsigned int iFrames,
+	float fGainIter, float fGainLast, float *pfValue )
+{
+	const float fGainStepSingle = (fGainLast - fGainIter) / float(iFrames);
+
+	for (; (long(pFrames) & 15) && (iFrames > 0); --iFrames) {
+		*pFrames++ *= fGainIter;
+		fGainIter += fGainStepSingle;
+	}
+
+	float __attribute__ ((aligned (16))) fInitGainIter[4] = {
+		fGainIter,
+		fGainIter + fGainStepSingle,
+		fGainIter + 2.0 * fGainStepSingle,
+		fGainIter + 3.0 * fGainStepSingle };
+
+	const float fGainStep = 4.0f * fGainStepSingle;
+	float32x4_t vGainIter = vld1q_f32(fInitGainIter);
+	float32x4_t vGainStep = vld1q_dup_f32(&fGainStep);
+	float32x4_t v1 = vld1q_dup_f32(pfValue);
+	float32x4_t v2;
+
+	for (; iFrames >= 4; iFrames -= 4) {
+		v2 = vmulq_f32(vld1q_f32(pFrames), vGainIter);
+		v1 = vmaxq_f32(v2, v1);
+		vst1q_f32(pFrames, v2);
+		vGainIter += vGainStep;
+		pFrames += 4;
+	}
+
+	for (; iFrames > 0; --iFrames) {
+		*pFrames++ *= fGainIter;
+		fGainIter += fGainStepSingle;
+	}
+
+	vst1q_lane_f32(pfValue, v1, 3); // CHEAT: take 4th of 4 possible values.
+}
+
+static inline void neon_process_meter (
+	float *pFrames, unsigned int iFrames, float *pfValue )
+{
+	float32x4_t v1 = vld1q_dup_f32(pfValue);
+
+	for (; (long(pFrames) & 15) && (iFrames > 0); --iFrames)
+		++pFrames;
+
+	for (; iFrames >= 4; iFrames -= 4) {
+		v1 = vmaxq_f32(vld1q_f32(pFrames), v1);
+		pFrames += 4;
+	}
+
+	vst1q_lane_f32(pfValue, v1, 0); // CHEAT: take 1st of 4 possible values.
+}
+
+#endif
+
 // Standard processor versions.
 static inline void std_process (
 	float *pFrames, unsigned int iFrames, float fGain, float *pfValue )
@@ -173,14 +255,19 @@ qtractorAudioMonitor::qtractorAudioMonitor ( unsigned short iChannels,
 		m_pfnProcess = sse_process;
 		m_pfnProcessRamp = sse_process_ramp;
 		m_pfnProcessMeter = sse_process_meter;
-	} else {
+	} else
 #endif
+#if defined(__ARM_NEON__)
+	m_pfnProcess = neon_process;
+	m_pfnProcessRamp = neon_process_ramp;
+	m_pfnProcessMeter = neon_process_meter;
+	if(false)
+#endif
+	{
 	m_pfnProcess = std_process;
 	m_pfnProcessRamp = std_process_ramp;
 	m_pfnProcessMeter = std_process_meter;
-#if defined(__SSE__)
 	}
-#endif
 
 	setChannels(iChannels);
 }
diff --git a/src/qtractorInsertPlugin.cpp b/src/qtractorInsertPlugin.cpp
index 40e21e3..a5f909c 100644
--- a/src/qtractorInsertPlugin.cpp
+++ b/src/qtractorInsertPlugin.cpp
@@ -155,6 +155,94 @@ static inline void sse_process_add (
 
 #endif
 
+#if defined(__ARM_NEON__)
+#include "arm_neon.h"
+
+// NEON enabled processor versions.
+static inline void neon_process_gain (
+	float **ppFrames, unsigned int iFrames,
+	unsigned short iChannels, float fGain )
+{
+	float32x4_t vGain = vdupq_n_f32(fGain);
+
+	for (unsigned short i = 0; i < iChannels; ++i) {
+		float *pFrames = ppFrames[i];
+		unsigned int nframes = iFrames;
+		for (; (long(pFrames) & 15) && (nframes > 0); --nframes)
+			*pFrames++ *= fGain;
+		for (; nframes >= 4; nframes -= 4) {
+			vst1q_f32(pFrames,
+				vmulq_f32(
+					vld1q_f32(pFrames), vGain
+				)
+			);
+			pFrames += 4;
+		}
+		for (; nframes > 0; --nframes)
+			*pFrames++ *= fGain;
+	}
+}
+
+static inline void neon_process_dry_wet (
+	float **ppBuffer, float **ppFrames, unsigned int iFrames,
+	unsigned short iChannels, float fDry, float fWet )
+{
+	float32x4_t vDry = vdupq_n_f32(fDry);
+	float32x4_t vWet = vdupq_n_f32(fWet);
+
+	for (unsigned short i = 0; i < iChannels; ++i) {
+		float *pBuffer = ppBuffer[i];
+		float *pFrames = ppFrames[i];
+		unsigned int nframes = iFrames;
+		for (; (long(pBuffer) & 15) && (nframes > 0); --nframes) {
+			*pBuffer   *= fWet;
+			*pBuffer++ += fDry * *pFrames++;
+		}
+		for (; nframes >= 4; nframes -= 4) {
+			float32x4_t vBuffer = vld1q_f32(pBuffer);
+			vBuffer = vmulq_f32(vBuffer, vWet);
+			float32x4_t vFrames = vld1q_f32(pFrames);
+			// Vr[i] := Va[i] + Vb[i] * Vc[i]
+			vBuffer = vmlaq_f32(vBuffer, vDry, vFrames);
+			vst1q_f32(pBuffer, vBuffer);
+			pFrames += 4;
+			pBuffer += 4;
+		}
+		for (; nframes > 0; --nframes) {
+			*pBuffer   *= fWet;
+			*pBuffer++ += fDry * *pFrames++;
+		}
+	}
+}
+
+static inline void neon_process_add (
+	float **ppBuffer, float **ppFrames, unsigned int iFrames,
+	unsigned short iChannels, float fGain )
+{
+	float32x4_t vGain = vdupq_n_f32(fGain);
+
+	for (unsigned short i = 0; i < iChannels; ++i) {
+		float *pBuffer = ppBuffer[i];
+		float *pFrames = ppFrames[i];
+		unsigned int nframes = iFrames;
+		for (; (long(pBuffer) & 15) && (nframes > 0); --nframes)
+			*pBuffer++ += fGain * *pFrames++;
+		for (; nframes >= 4; nframes -= 4) {
+			float32x4_t vBuffer = vld1q_f32(pBuffer);
+			float32x4_t vFrames = vld1q_f32(pFrames);
+			//Vr[i] := Va[i] + Vb[i] * Vc[i]
+			vBuffer = vmlaq_f32(vBuffer, vGain, vFrames);
+			vst1q_f32(pBuffer, vBuffer);
+			pFrames += 4;
+			pBuffer += 4;
+		}
+		for (; nframes > 0; --nframes)
+			*pBuffer++ += fGain * *pFrames++;
+	}
+}
+
+#endif
+
 
 // Standard processor versions.
 static inline void std_process_gain (
@@ -367,13 +455,17 @@ qtractorAudioInsertPlugin::qtractorAudioInsertPlugin (
 	if (sse_enabled()) {
 		m_pfnProcessGain = sse_process_gain;
 		m_pfnProcessDryWet = sse_process_dry_wet;
-	} else {
+	} else
 #endif
-	m_pfnProcessGain = std_process_gain;
-	m_pfnProcessDryWet = std_process_dry_wet;
-#if defined(__SSE__)
-	}
+#if defined(__ARM_NEON__)
+	m_pfnProcessGain = neon_process_gain;
+	m_pfnProcessDryWet = neon_process_dry_wet;
+	if(false)
 #endif
+	{
+		m_pfnProcessGain = std_process_gain;
+		m_pfnProcessDryWet = std_process_dry_wet;
+	}
 
 	// Create and attach the custom parameters...
 	m_pSendGainParam = new qtractorInsertPluginParam(this, 0);
@@ -1120,12 +1212,15 @@ qtractorAudioAuxSendPlugin::qtractorAudioAuxSendPlugin (
 #if defined(__SSE__)
 	if (sse_enabled()) {
 		m_pfnProcessAdd = sse_process_add;
-	} else {
+	} else
+#endif
+#if defined(__ARM_NEON__)
+	m_pfnProcessAdd = neon_process_add;
+	if(false)
 #endif
+    {
 		m_pfnProcessAdd = std_process_add;
-#if defined(__SSE__)
 	}
-#endif
 
 	// Create and attach the custom parameters...
 	m_pSendGainParam = new qtractorInsertPluginParam(this, 0);
-- 
2.9.5

